#ifndef OSGGEO_THUMBWHEEL_H
#define OSGGEO_THUMBWHEEL_H

/* osgGeo - A collection of geoscientific extensions to OpenSceneGraph.
Copyright 2011 dGB Beheer B.V.

osgGeo is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>

$Id: Horizon3D 108 2012-10-08 08:32:40Z kristofer.tingdahl@dgbes.com $

*/

#include <osgGeo/Common>
#include <osg/Node>
#include <osgGA/EventQueue>
#include <osgGA/GUIEventHandler>


namespace osg { class Geode; class NodeVisitor; class Geometry; }

namespace osgGeo
{


/**
 * Wheel for performing rotation
 */

class OSGGEO_EXPORT ThumbWheel : public osg::Node
{
public:
    ThumbWheel();
    
    void accept(osg::NodeVisitor&);
    osg::BoundingSphere computeBound() const;
    
    void setShape(short dim,const osg::Vec2& min,const osg::Vec2& max,
		  float zval = 0);
    const osg::Vec2& getMin() const { return _min; }
    const osg::Vec2& getMax() const { return _max; }
    void setAngle(float);
    float getAngle() const { return _currentangle; }
    
    void addRotateCallback(osg::NodeCallback *nc);
    void removeRotateCallback(osg::NodeCallback *nc);
    
protected:
    friend class OSGGEO_EXPORT ThumbWheelEventHandler;
    void updateCoords();
    char getMousePosStatus(const osg::Vec2& mousepos ) const;
    //!<\retval 0 is not close
    //!<\retval 1 is close
    //!<\retval 2 is over
    
    void showWheel(bool yn);
    bool handleEvent( const osgGA::GUIEventAdapter& ea );
    ~ThumbWheel();
    
    osg::Vec2 _min;
    osg::Vec2 _max;

    osg::Geode* _geode;
    osg::Geometry* _wheelgeometry;
    osg::Geometry* _outlinegeometry;
    bool _istracking;
    float _startpos;
    float _startangle;
    float _currentangle;
    short _dim;
    osg::ref_ptr<osg::NodeCallback> _cb;
};


class OSGGEO_EXPORT ThumbWheelEventHandler : public osgGA::GUIEventHandler
{
public:
    void addThumbWheel(ThumbWheel* t)
    { _thumbwheels.push_back(osg::ref_ptr<ThumbWheel>(t)); }
    void removeThumbWheel(ThumbWheel* t);
    
    
protected:
    bool handle (const osgGA::GUIEventAdapter &ea, osgGA::GUIActionAdapter &aa,
		 osg::Object*, osg::NodeVisitor*);
    std::vector<osg::ref_ptr<ThumbWheel> > _thumbwheels;
};

class OSGGEO_EXPORT ThumbWheelEventNodeVisitor : public osg::NodeVisitor
{
public:
    ThumbWheelEventNodeVisitor(float deltaangle);
    float getDeltaAngle() const { return _deltaangle; }
protected:
    float _deltaangle;
};

}

#endif
