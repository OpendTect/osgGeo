#ifndef OSGGEO_POLYLONENODE_H
#define OSGGEO_POLYLONENODE_H

/* osgGeo - A collection of geoscientific extensions to OpenSceneGraph.
Copyright 2011 dGB Beheer B.V.

osgGeo is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>

$Id$

*/

#include <osg/Node>
#include <osg/Vec3>
#include <osg/NodeVisitor>
#include <osgGeo/Common>


namespace osg { class Geometry; class CullStack; }

namespace osgGeo
{

class OSGGEO_EXPORT	PolyLineNode : public osg::Node
{
public:

			PolyLineNode();
			PolyLineNode(const PolyLineNode&,
				const osg::CopyOp& op =
				    osg::CopyOp::DEEP_COPY_ALL);
			META_Node(osgGeo,PolyLineNode);

    void		traverse(osg::NodeVisitor&);
    void		setVertexArray(osg::Array*);
    void		setRadius(const float&);
    float		getRadius() const { return _radius; }
    void		setResolution(int);
    int			getResolution() const { return _resolution; }
    void		addPrimitiveSet(osg::PrimitiveSet*);
    void		removePrimitiveSet(int);
    int			getPrimitiveSetIndex(const osg::PrimitiveSet*) const;
    void		touchPrimitiveSet(int)			{}

protected:
    virtual		~PolyLineNode();
    bool		updateGeometry(const osg::CullStack*);
    bool		needsUpdate(const osg::CullStack*) const;
    void		getOrthoVecs(const osg::Vec3&,osg::Vec3&,
				     osg::Vec3&) const;

    osg::BoundingSphere	computeBound() const;  

    osg::Vec3			_center;
    osg::Vec3			_width;
    bool			_needsUpdate;
    osg::ref_ptr<osg::Array>	_array;
    float			_radius;
    float			_maxRadius;
    bool			_screenSizeScaling;
    osg::ref_ptr<osg::Geometry>	_geometry;
    unsigned int		_arrayModifiedCount;
    int				_resolution;
    unsigned int		_arraymodcount;
    osg::BoundingSphere		_bs;

    std::vector<osg::ref_ptr<osg::PrimitiveSet> >	_primitivesets;
};



}
#endif //OSGGEO_TEXTUREPLANE_H

