#ifndef OSGGEO_MARKERSET_H
#define OSGGEO_MARKERSET_H

/* osgGeo - A collection of geoscientific extensions to OpenSceneGraph.
Copyright 2011 dGB Beheer B.V.

osgGeo is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>

$Id: TexturePlane 108 2012-10-08 08:32:40Z kristofer.tingdahl@dgbes.com $

*/

#include <osg/Node>
#include <osgGeo/Common>

#include <osg/Array>
#include <osg/Geode>
#include <osg/ShapeDrawable>
#include <osg/Shape>
#include <osg/NodeVisitor>
#include <osg/Switch>
#include <osgGeo/AutoTransform>

namespace osg 
{ 
  class Geometry; 
  class Geode; 
  class Shape;
  class Array;
  class TessellationHints;
  class Switch;
}

namespace osgGeo
{


class OSGGEO_EXPORT MarkerSet : public osg::Node
{
public:
												MarkerSet();
												MarkerSet(const MarkerSet&,
												const osg::CopyOp& op =
															osg::CopyOp::
															DEEP_COPY_ALL);
												META_Node(osgGeo,MarkerSet);
												~MarkerSet();
													 
    void										setVertexArray(osg::Vec3Array*);
	osg::Vec3Array*								getVertexArray() const 
												{ return _vec3Array; }

	void										setColorArray(osg::Vec4Array*);
	osg::Vec4Array*								getColorArray() const 
												{ return _vec4Array; }

	enum										MarkerType {None=-1,Box=0, Cone,
												Cylinder, Sphere, Arrow, Cross,
												Point, Plane};

	void										setShape( MarkerType );
	MarkerType									getShape() {return _shapeType;}

	void										setDetail(float);
												//!<Between 0 and 1.
	float										getDetail();

	void										setRadius(float);
	float										getRedius() const 
												{ return _radius; }

	void										setHeight(float);
	float										getHeight() const 
												{ return _height; }

	void									 	setScale (double scale);
	void 										setScale (const osg::Vec3d 
														&scale);
	const osg::Vec3d&							getScale(){return _vec3dScale;}
	void										setMinimumScale(double minScale);
    void										setMaximumScale(double maxScale);

    void										turnOn( bool );
    bool										isOn() const;

	void										setAutoTransformRotateMode(osg
												::AutoTransform::AutoRotateMode
												);

protected:
    osg::BoundingSphere							computeBound() const;
    void										traverse( osg::NodeVisitor& );
	bool										updateShapes();
	bool										needsUpdate();

	osg::ref_ptr<osg::Shape>					_shape;
	osg::ref_ptr<osg::Geode>					_geode;
	osg::ref_ptr<osg::TessellationHints>		_hints;
	osg::ref_ptr<osg::Vec3Array>				_vec3Array;
	osg::ref_ptr<osg::Vec4Array>				_vec4Array;
	osg::ref_ptr<osg::Group>					_nonshadinggroup;
	osgGeo::AutoTransform::AutoRotateMode		_rotateMode;	

	osg::Vec3d									_vec3dScale;
	MarkerType									_shapeType;
	double										_scale;
	double										_minScale;
	double										_maxScale;
	float										_radius;
	float										_height;
	bool										_needsUpdate;
	int											_arraymodcount;
};

}
#endif //OSGGEO_MARKERSET_H
