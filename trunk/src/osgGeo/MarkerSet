#ifndef OSGGEO_MARKERSET_H
#define OSGGEO_MARKERSET_H

/* osgGeo - A collection of geoscientific extensions to OpenSceneGraph.
Copyright 2011 dGB Beheer B.V.

osgGeo is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>

$Id: MarkerSet 108 2012-12-08 08:32:40Z kristofer.tingdahl@dgbes.com $

*/

#include <osg/Node>
#include <osgGeo/Common>

#include <osg/Array>
#include <osg/Geode>
#include <osg/ShapeDrawable>
#include <osg/Shape>
#include <osgGeo/AutoTransform>

namespace osg 
{ 
  class Geometry; 
  class Geode; 
  class Shape;
  class Array;
  class TessellationHints;
}

namespace osgGeo
{


class OSGGEO_EXPORT MarkerSet : public osg::Node
{
    public:
			    	MarkerSet();
				~MarkerSet();
					 
	void			setVertexArray(osg::Vec3Array*);
	osg::Vec3Array*		getVertexArray() const { return _vertexArr; }

	void			setNormalArray(osg::Vec3Array*);
	osg::Vec3Array*		getNormalArray() const { return _normalArr; }

	void			setColorArray(osg::Vec4Array*);
	osg::Vec4Array*		getColorArray() const { return _colorArr; }

	enum			MarkerType { None=-1,Box=0, Cone, Cylinder, 
					     Sphere };

	void			setShape(MarkerType);
	MarkerType		getShape() { return _shapeType; }

	void			setDetail(float ratio);
				//!<Between 0 and 1.
	float			getDetail() const 
				{ return _hints->getDetailRatio(); }

	void			setMarkerSize(float, bool useScreensize = true);
	float			getMarkerSize() const;
	bool			isScreenSize() const { return _useScreenSize; }

	void			setMarkerHeightRatio(float);
	float			getMarkerHeightRatio() const 
				{ return _markerHeightRatio; }	

	void			setMinScale(float minscale);
	float			getMinScale() const {return _minScale;}

	void			setMaxScale(float maxscale);
	float			getMaxScale() const {return _maxScale;}

	void			setRotateMode(osg::AutoTransform::AutoRotateMode);
	osg::AutoTransform::AutoRotateMode
				getRotateMode() const { return _rotateMode; }

    protected:
	osg::BoundingSphere			computeBound() const;
	void					traverse(osg::NodeVisitor&);
	bool					updateShapes();

    private:
	bool					needsUpdate();
	osg::ref_ptr<osg::Shape>		_shape;
	osg::ref_ptr<osg::TessellationHints>	_hints;
	osg::ref_ptr<osg::Vec3Array>		_vertexArr;
	osg::ref_ptr<osg::Vec4Array>		_colorArr;
	osg::ref_ptr<osg::Vec3Array>		_normalArr;
	osg::ref_ptr<osg::Group>		_nonShadingGroup;
	osgGeo::AutoTransform::AutoRotateMode	_rotateMode;

	MarkerType				_shapeType;
	float					_minScale;
	float					_maxScale;
	float					_markerSize;
	float					_markerHeightRatio;
	bool					_needsUpdate;
	int					_arrayModCount;
	bool					_useScreenSize;
};

}
#endif //OSGGEO_MARKERSET_H
