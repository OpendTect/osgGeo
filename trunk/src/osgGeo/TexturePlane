#ifndef OSGGEO_TEXTUREPLANE_H
#define OSGGEO_TEXTUREPLANE_H

/* osgGeo - A collection of geoscientific extensions to OpenSceneGraph.
Copyright 2011 dGB Beheer B.V.

osgGeo is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#include <osg/Node>
#include <osg/Vec3>
#include <osg/NodeVisitor>
#include <osgGeo/Common>


namespace osg { class Geometry; }

namespace osgGeo
{

class LayeredTexture;

class OSGGEO_EXPORT TexturePlaneNode : public osg::Node
{
public:

				TexturePlaneNode();
				TexturePlaneNode(const TexturePlaneNode&,
				    const osg::CopyOp& op =
					osg::CopyOp::DEEP_COPY_ALL);
				META_Node(osgGeo,TexturePlaneNode);

    void			setCenter(const osg::Vec3&);
    const osg::Vec3&		getCenter() const;

    void			setTextureBrickSize(short);
				//Will be ceiled to power of two
    short			getTextureBrickSize() const;

    void			setWidth(const osg::Vec3&);
				//!One dim must be zero
				//!Negative width yields mirrored dim
    const osg::Vec3&		getWidth() const;

    void			swapTextureAxes(bool yn=true);
    bool			areTextureAxesSwapped() const;

    void			traverse(osg::NodeVisitor&);

    void			setLayeredTexture(LayeredTexture*);
    LayeredTexture*		getLayeredTexture();
    const LayeredTexture*	getLayeredTexture() const;

    char			getThinDim() const;

protected:
    TexturePlaneNode&			operator=(const TexturePlaneNode&);
    virtual				~TexturePlaneNode();
    bool				updateGeometry();
    float				getSense() const;
    bool				needsUpdate() const;
    void				cleanUp();

    osg::Vec3				_center;
    osg::Vec3				_width;
    short				_textureBrickSize;
    bool				_needsUpdate;

    bool				_swapTextureAxes;

    osg::ref_ptr<LayeredTexture>	_texture;

    std::vector<osg::Geometry*>		_geometries;
    std::vector<osg::StateSet*>		_statesets;

    void				updateBoundingGeometry();
    osg::Geometry*			_boundingGeometry;

public:
			// Testing purposes only

    int			_disperseFactor;
    void		setDisperseFactor( int val )
			{ _disperseFactor = val; _needsUpdate = true; }
    int			getDisperseFactor() const
			{ return _disperseFactor; }

    bool		_useShaders;
    void		toggleShaders()
			{ _useShaders = !_useShaders; _needsUpdate = true; }
};



}
#endif //OSGGEO_TEXTUREPLANE_H
