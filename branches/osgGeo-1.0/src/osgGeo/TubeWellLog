#ifndef OSGGEO_TUBEWELLLOG_H
#define OSGGEO_TUBEWELLLOG_H

/* osgGeo - A collection of geoscientific extensions to OpenSceneGraph.
Copyright 2012 dGB Beheer B.V.

osgGeo is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>

$Id$

*/

#include <osg/Node>
#include <osgGeo/Common>
#include <osgGeo/WellLog>
#include <osg/Geode>
#include <osg/Vec3>

namespace osg 
{ 
    class Geometry; 
    class Geode; 
    class Shape;
    class Array;
    class FrameStamp;
    class LineWidth;
}

namespace osgUtil
{
    class CullVisitor;
}

namespace osgGeo
{

class OSGGEO_EXPORT TubeWellLog : public osgGeo::WellLog
{
public:
        			TubeWellLog();
                                TubeWellLog(const TubeWellLog&,
                                        const osg::CopyOp& op = osg::CopyOp::DEEP_COPY_ALL);
                                META_Node(osgGeo,TubeWellLog);

    enum RenderMode 		{ RenderBackSide=-1, RenderBothSides, RenderFrontSide };

    void			setRenderMode(RenderMode mode);
    RenderMode			getRenderMode() const;

    void			setResolution(int);
    int				getResolution() const {return _resolution;}

    virtual void		setDisplaySide(DisplaySide) {};
    virtual DisplaySide		getDisplaySide() const {return Left;};
    virtual void		setRepeatNumber(unsigned int) {};
    virtual unsigned int	getRepeatNumber() const {return 0;};
    virtual void		setRepeatGap (float) {};
    virtual float		getRepeatGap() const {return .0f;};
    virtual void		setFullFilled(bool){};
    virtual bool		getFullFilled() const {return false;};
    virtual void		setSeisLogStyle(bool){};
    virtual bool 		getSeisLogStyle() const{return false;};
    virtual void		setLogFill(bool){};
    bool			getLogFill() const { return false; }
    virtual void		clearLog();


protected:
    osg::BoundingSphere			computeBound() const;
    virtual void	 		traverse(osg::NodeVisitor&);
    virtual float			getShapeFactor(float val, float minval, 
							float maxval) const;
    					~TubeWellLog();
private:
    void			calcTubeShape();
    void			updateTubeLogColor();
    void			clearTubeShape();
    void			clearVerts();
    void			buildTubeGeometry();
    void			buildCenterLineGeometry();
    void			buildTube(bool) ;

    std::vector<int>			_outTubeIndex;
    osg::ref_ptr<osg::Vec3Array>	_logTubeVerts;
    osg::ref_ptr<osg::Geometry>		_tubeGeometry;
    osg::ref_ptr<osg::Vec4Array>	_tubeLogColors;
    osg::ref_ptr<osg::Vec4Array>	_logColors;
    osg::ref_ptr<osg::FloatArray>	_coordLinedFactors;
    osg::ref_ptr<osg::Geometry>		_logPathGeometry;
    osg::ref_ptr<osg::DrawArrays>	_logPathPrimitiveSet;
    osg::ref_ptr<osg::Vec3Array>	_logPathVerts;
    osg::ref_ptr<osg::Vec4Array>	_logPathColor;
    osg::ref_ptr<osg::LineWidth>	_logPathWidth;
    osg::ref_ptr<osg::Vec3Array>	_logTubeShapePoints;
    osg::ref_ptr<osg::Vec3Array>	_logTubeCircleNormals;
    int					_resolution;

};


} // namespace

#endif //OSGGEO_TUBEWELLLOG_H

